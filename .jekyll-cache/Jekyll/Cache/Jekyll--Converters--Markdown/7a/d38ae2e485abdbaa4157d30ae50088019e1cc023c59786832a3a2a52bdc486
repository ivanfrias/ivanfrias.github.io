I"<p><strong>Disclaimer:</strong> To protect intelectual property of previous employers, the name
of the projects will be replaced by a reference: PROJ_COMPANY_INDEX</p>

<h1 id="fuze">Fuze</h1>
<h3 id="proj_fuze_1">PROJ_FUZE_1</h3>

<p><strong>Type</strong>: customer facing</p>

<p><strong>Description</strong>: Developed a command-line bulk upload tool, used by a large customer to upload
call-flow related audio-files on a regular basis.</p>

<p><strong>Technologies</strong>: Nodejs, mocha, chai, Typescript, REST</p>

<h3 id="proj_fuze_2">PROJ_FUZE_2</h3>

<p><strong>Type</strong>: customer&amp;internal facing</p>

<p><strong>Description</strong>: Full-stack developer on an internal project ( front-end and back-end ) that automates number
request/number porting from loosing carriers. Front-end is a react app integrated
on Fuzeâ€™s customer provisioning portal. Back-end is a micro-service that acts as
an <em>integration hub</em> between Fuze APIs and 3rd Party Number carriers. The focus currently is to redesigning the back-end application
to increase the quality through unit and integration tests.</p>

<p><strong>Technologies</strong>: React, HTML, CSS, JavaScript, Typescript, Java 8, Spring Docker, Junit 4/5, Mockito, Postgres, Liquibase, MyBatis</p>

<h3 id="proj_fuze_3">PROJ_FUZE_3</h3>

<p><strong>Type</strong>: customer&amp;internal facing</p>

<p><strong>Description</strong>: Worked as part of a scrum-team doing front-end development on Fuzeâ€™s customer provisioning portal ( groups of contacts functionality ) as well as writing test cases for front-end integration testing.</p>

<p><strong>Technologies</strong>: React, HTML, CSS, JavaScript, TypeScript, REST, Selenium, mocha</p>

<h3 id="proj_fuze_4">PROJ_FUZE_4</h3>

<p><strong>Type</strong>: internal facing</p>

<p><strong>Description</strong>: Developed a bulk provisioning application used internally by a
large user-base ( services &amp; support teams). This application allows users to
upload a text file containing meta-data of users/services/departments/locations/handsets to provision
and it can take seconds to bulk provision or modify thousands of users&amp;services, minimizing the onboarding
time for new or existing customers.</p>

<p><strong>Technologies</strong>: Vue.js, HTML, CSS, Electron, Node.js, CouchDB, REST</p>

<h3 id="proj_fuze_5">PROJ_FUZE_5</h3>

<p><strong>Type</strong>: customer facing</p>

<p><strong>Description</strong>: created an adapter microservice to parse incoming emails and route them to the destination
via fax APIs.</p>

<p><strong>Technologies</strong>
Node.js, Javascript, AWS Lambda, AWS SNS, AWS S3, REST</p>

<h3 id="proj_fuze_6">PROJ_FUZE_6</h3>

<p><strong>Type</strong>: internal facing</p>

<p><strong>Description</strong>: Develop a back-office web-application to manage access and configuration of
another customer-facing tool developed and maintained by the SA&amp;E team.</p>

<p><strong>Technologies</strong>
Vue.js, HTML, CSS, REST, AWS S3, Javascript, Bootstrap</p>

<h3 id="proj_fuze_7">PROJ_FUZE_7</h3>

<p><strong>Type</strong>: customer facing</p>

<p><strong>Description</strong>: Design and implement a solution to mask outbound calls placed from
Fuzeâ€™s click-to-call browser plugin. Mask numbers are configured by Fuze internal teams
through a back-office web-application developed to manage that. The back-end consists of a REST
API created by me to accept CRUD requests and queries. Mask numbers and configuration
information is stored on a document-based database.</p>

<p><strong>Technologies</strong>
Vue.js, Javascript, HTML, CSS, REST, AWS EC2,</p>
:ET