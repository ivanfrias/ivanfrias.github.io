I"Y<p>Woah, as been such a long since I wrote anything here. I‚Äôll do my best to keep this updated with meaningful content on a timely fashion :)</p>

<p>Moving to more important topics‚Ä¶ ELECTRON!</p>

<p>As part of my current role, I am in charge of development of a certain electron-based application. While publishing an electron-based application is quite simple ( thanks to electron-builder! ) it also means differences on how application packages are generated and published for each platform - win, mac and linux. There is no surprise there.</p>

<h2 id="certificates">Certificates‚Ä¶</h2>
<p>One of the main challenges that I keep having is how to correctly configure the build instance machine so that the electron-builder can do it‚Äôs job of generating the package, signing it and uploading it to whatever backend you use to store the deliverables.</p>

<p>First of all - you‚Äôll need a code signing certificate. You can get one from DigiCert. There are caveats: To prevent Gatekeeper from complaining, you‚Äôll need to sign with an Apple Certificate. With a single certificate I am able to sign my applications, both for Windows and Mac and more importantly - enable auto-updates.</p>

<p><strong><em>Very important: auto-updates don‚Äôt work if your code isn‚Äôt signed. So make sure to get yourself a certificate, otherwise you‚Äôll have problems afterwards.</em></strong></p>

<h3 id="install-the-certificates-on-your-machine">Install the certificates on your machine</h3>
<p>Let‚Äôs assume that this is your first time configuring your CI/CD server to deploy the app. On Mac you‚Äôll need to install the certificates on your machine keystore. Tipically you‚Äôll need to install both - the code signing certificate and the CA certificate, otherwise, the code-signing one will me marked as not trusted ( check if there is a red mark on top of the certificate when loading the keystore access ). After that step, you‚Äôll need top generate a *.p12 file based on the code-signing certificate and configure electron-builder to use that, otherwise the <code class="language-plaintext highlighter-rouge">codesign</code> command will fail.</p>

<h4 id="generate-the-p12-file">Generate the *.p12 file</h4>

<p>To generate the *.p12 file you can simply open Keystore Access app on mac. Click ‚Äòlogin‚Äô&gt; ‚ÄúMy Certificates‚Äù and select the certificates you want to export to your new *.p12 file. You want to export the CA root certificate along with the private key contained on your code-signing certificate. Select both and click ‚ÄòFile‚Äô &gt; ‚ÄòExport‚Ä¶‚Äô. Type the name of the certificate and on the drop-down, select the type that contains p12. Click ‚ÄòOK‚Äô. Enter a password for the *.p12 file and hit OK. This will produce a *.p12 file on the choosen destination.</p>

<h4 id="configure-electron-builder">Configure electron-builder</h4>

<p><code class="language-plaintext highlighter-rouge">electron-builder</code> needs to be configured properly in order to use the certificate you generated before.
To do so, please edit the environment variable script ( if you use <code class="language-plaintext highlighter-rouge">bash</code> tipically is ~/.bashrc ). Append the following to the file:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>export CSC_LINK=~/Documents/User/Certificates/&lt;Certificate file&gt;
export CSC_KEY_PASSWORD=&lt;Password&gt;
</code></pre></div></div>

<p><strong>Certificate file</strong> refers to the name of the file exported previously through keystore app.</p>

<p><strong>Password</strong> is the password defined previously on the keystore app.</p>

<p>For windows it‚Äôs a bit easier. I‚Äôve found that we don‚Äôt need to add environment variables for this to work. We just need to install the certificates by double clicking the *.p12 file.</p>

<p>And that‚Äôs it, hope you find this post interesting!</p>

:ET